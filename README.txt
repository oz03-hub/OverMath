Contributions:

Ozel Yilmazel:
- Implemented AdversarialAI.CS, 177 lines
- Implemented AdversarialAudioManager.cs, 29 lines
- Implemented CameraFollow.cs, 1 line
- Fixed a few issues in CustomerAI.cs, 5 lines
- Implement FloatingText.cs, 15 lines
- Implement PlayerController.cs, lines 1-180
- Implement Projectile.cs, 62 lines
- Implement QuizGenerator.cs, 80 lines
- Implement Ragdoll.cs, 75 lines
- Implement RangedAdvAI.cs, 213 lines
- Added sounds

Hanna Jiang:
- Jiang implemented the CustomerAI.cs, lines 55-86, 157-175, 230-249, added functions to make orders and work with CustomerManager
- Jiang implemented the CustomerManager.cs, lines 1-143
- Jiang implemented and designed the GameLevelManager.cs, lines 1-157
- Jiang implemented the PauseManager.cs, lines 1-75
- Jiang implemented the TableSpawner.cs, lines 1-36
- Jiang implemented the StartButton.cs, lines 1-11
- Jiang implemented the StartMenu.cs, lines 1-29
- Jiang implemented the RestartGame.cs, lines 1-48
- Designed scene

Kien To:
- Created the CustomerAI.cs, lines 1-244.
- Created the CustomerSpawner.cs, lines 1-143.
- Implemented algorithm for pathfinding of AI customers.
- Added customer prefabs and animations.
- Implemented ordering by customers.

Bao Dang:
- Designed OverMath's logo
- Designed game's GUI in Unity's UI Toolkit, including:
    - InstructionUI.uxml, lines 1-17
    - instruction-menu.uss, lines 1-105
    - GameUI.uxml with dynamic transition for pause, win, and lose menus, lines 1-54
    - GameGUIStyles.uss, lines 1-352
- Linked game's GUI with Hanna's scripts StartMenu.cs, RestartGame.cs, PauseManager.cs
- Designed prefabs for 3D numbers, kitchen tools with math-operators (PlusPan, MinusCuttingBoard, MultiplyMicrowave) using Anything World, can be found in Resources folder
- Implemented Order.cs to dynamically generating order cards with running timer on the GUI, lines 1-46
- Integrated QuizGenerator.cs with GameGUI, lines 13, 20-24, 98-104, 155-168
- Fixed customer slimes' moving animation and integration with GUI in CustomerAI.cs, lines 111, 122-123, 150-157, 172-178

Minh Vu:
- Handle Interactions between main characters and numbers, trash can, operators, and customers. Leveraged interaction with blinking effects with interaction layer (Interactable.cs 1-249)
- Implement dynamic numbers and operators prefabs (assets/Resources) spawner during game runtime. Can be changes dynamically based on Quiz Generator inputs (OperationSpawner.cs 1-202)
- Using colliders to detect the interaction range between the main characters and objects such as numbers and operators (PlayerController.cs 156-251)
- Refactor customer manager file for smooth interaction between main character and customers (CustomerManager.cs ~20 lines fixed)
- GameInteractableManager.cs 20 lines
- Ensured the number picked by main character got properly displayed through UI (GameLevelManager.cs 15 lines) 
- Convert Filmbox files (.fbx) generated by @BaoDang to .prefab file for numbers and operators interface

All detailed commit history can be found in repository.

----

Used Assets:
Enemy Animals: https://assetstore.unity.com/packages/3d/characters/animals/quirky-series-free-animals-pack-178235
Customer Slimes: https://assetstore.unity.com/packages/3d/characters/creatures/kawaii-slimes-221172
Player: https://assetstore.unity.com/packages/3d/characters/humanoids/picochan-220038
Restaurant Assets: https://assetstore.unity.com/packages/3d/environments/fast-food-restaurant-kit-239419
Player Animations: https://assetstore.unity.com/packages/3d/animations/basic-motions-free-154271
Apartment Kit: https://assetstore.unity.com/packages/3d/environments/apartment-kit-124055
Bit8 Audio: https://assetstore.unity.com/packages/audio/music/8bit-music-062022-225623

GitHub Repository: https://github.com/oz03-hub/OverMath
